{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","coffees","name","counter","increase","bind","assertThisInitialized","decrease","coffeType","newArray","slice","find","x","setState","_this2","react_default","a","createElement","className","map","item","key","type","onClick","reduce","total","current","filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb2badd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let coffees = [\n      {'name': 'Liscio', 'counter': 0},\n      {'name': 'Lungo', 'counter': 0},\n      {'name': 'Macchiato', 'counter': 0},\n      {'name': 'Brutto', 'counter': 0},\n      {'name': 'Orzo', 'counter': 0},\n      {'name': 'Orzo Macchiato', 'counter': 0},\n      {'name': 'Cappuccino', 'counter': 0},\n      {'name': 'Liscio Deca', 'counter': 0},\n      {'name': 'Lungo Deca', 'counter': 0},\n      {'name': 'Macchiato Deca', 'counter': 0},\n      {'name': 'Brutto Deca', 'counter': 0},\n      {'name': 'Cappuccino Deca', 'counter': 0},\n      {'name': 'CaffÃ¨ al ginseng', 'counter': 0},\n      {'name': 'Orange Juice', 'counter': 0}\n    ];\n    this.state = { coffees: coffees };\n    this.increase = this.increase.bind(this);\n    this.decrease = this.decrease.bind(this);\n  }\n\n  increase(coffeType) {\n    let newArray = this.state.coffees.slice();\n    newArray.find(x => x.name === coffeType).counter++;\n    this.setState({coffees: newArray});\n  }\n\n  decrease(coffeType) {\n    let newArray = this.state.coffees.slice();\n    if (newArray.find(x => x.name === coffeType).counter > 0){\n      newArray.find(x => x.name === coffeType).counter--;\n    }\n    this.setState({coffees: newArray});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <ul className=\"list-group\">\n              {this.state.coffees.map((item) => (\n                <div key={item.name}>\n                  <div className=\"row\">\n                    <div className=\" text-center col-2\">\n                      <button type=\"button\" className=\"list-group-item list-group-item-action\" onClick={() => this.decrease(item.name)}>\n                          <span>-</span>\n                      </button>\n                    </div>\n                    <div className=\"col-10\">\n                      <button type=\"button\" className=\"list-group-item list-group-item-action\" onClick={() => this.increase(item.name)}>\n                        {item.name}\n                        <span className=\"badge badge-primary badge-pill ml-2\">{item.counter}</span>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </ul>\n          </div>\n        </div>\n        <div className=\"row mt-3\">\n          <div className=\"col-12 alert alert-primary\">\n          <h3>Total coffees: {this.state.coffees.reduce((total, current) => total + current.counter, 0)}</h3>\n          <ul>\n            {this.state.coffees.filter(x => x.counter > 0).map(item => (\n              <li key={item.name}>\n                <span>{item.name}: {item.counter}</span>\n              </li>\n            ))\n            }\n          </ul>\n          </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}